#!/usr/local/bin/python
import argparse
import os
import re
import shutil

parser = argparse.ArgumentParser(description='Organize TV Shows')
parser.add_argument("-n", "--name", help="Name of the show", type=str)
parser.add_argument("-d", "--dryrun", help="Dry Run", action='store_true')
parser.add_argument("-v", "--verbose", help="Verbose", action='store_true')
parser.add_argument("directory", help="Folder that contains unorganized shows", type=str)
args = parser.parse_args()


def mkdir(directoryName):
    if not os.path.isdir(directoryName):
        os.mkdir(directoryName)


def is_video_file(filename):
    video_file_extensions = ('.264', '.3g2', '.3gp', '.3gp2', '.3gpp', '.3gpp2', '.3mm', '.3p2', '.60d', '.787', '.89', '.aaf', '.aec', '.aep', '.aepx', '.aet', '.aetx', '.ajp', '.ale', '.am', '.amc', '.amv', '.amx', '.anim', '.aqt', '.arcut', '.arf', '.asf', '.asx', '.avb', '.avc', '.avd', '.avi', '.avp', '.avs', '.avs', '.avv', '.axm', '.bdm', '.bdmv', '.bdt2', '.bdt3', '.bik', '.bin', '.bix', '.bmk', '.bnp', '.box', '.bs4', '.bsf', '.bvr', '.byu', '.camproj', '.camrec', '.camv', '.ced', '.cel', '.cine', '.cip', '.clpi', '.cmmp', '.cmmtpl', '.cmproj', '.cmrec', '.cpi', '.cst', '.cvc', '.cx3', '.d2v', '.d3v', '.dat', '.dav', '.dce', '.dck', '.dcr', '.dcr', '.ddat', '.dif', '.dir', '.divx', '.dlx', '.dmb', '.dmsd', '.dmsd3d', '.dmsm', '.dmsm3d', '.dmss', '.dmx', '.dnc', '.dpa', '.dpg', '.dream', '.dsy', '.dv', '.dv-avi', '.dv4', '.dvdmedia', '.dvr', '.dvr-ms', '.dvx', '.dxr', '.dzm', '.dzp', '.dzt', '.edl', '.evo', '.eye', '.ezt', '.f4p', '.f4v', '.fbr', '.fbr', '.fbz', '.fcp', '.fcproject', '.ffd', '.flc', '.flh', '.fli', '.flv', '.flx', '.gfp', '.gl', '.gom', '.grasp', '.gts', '.gvi', '.gvp', '.h264', '.hdmov', '.hkm', '.ifo', '.imovieproj', '.imovieproject', '.ircp', '.irf', '.ism', '.ismc', '.ismv', '.iva', '.ivf', '.ivr', '.ivs', '.izz', '.izzy', '.jss', '.jts', '.jtv', '.k3g', '.kmv', '.ktn', '.lrec', '.lsf', '.lsx', '.m15', '.m1pg', '.m1v', '.m21', '.m21', '.m2a', '.m2p', '.m2t', '.m2ts', '.m2v', '.m4e', '.m4u', '.m4v', '.m75', '.mani', '.meta', '.mgv', '.mj2', '.mjp', '.mjpg', '.mk3d', '.mkv', '.mmv', '.mnv', '.mob', '.mod', '.modd', '.moff', '.moi', '.moov', '.mov', '.movie', '.mp21', '.mp21', '.mp2v', '.mp4', '.mp4v', '.mpe', '.mpeg', '.mpeg1', '.mpeg4', '.mpf', '.mpg', '.mpg2', '.mpgindex', '.mpl', '.mpl', '.mpls', '.mpsub', '.mpv', '.mpv2', '.mqv', '.msdvd', '.mse', '.msh', '.mswmm', '.mts', '.mtv', '.mvb', '.mvc', '.mvd', '.mve', '.mvex', '.mvp', '.mvp', '.mvy', '.mxf', '.mxv', '.mys', '.ncor', '.nsv', '.nut', '.nuv', '.nvc', '.ogm', '.ogv', '.ogx', '.osp', '.otrkey', '.pac', '.par', '.pds', '.pgi', '.photoshow', '.piv', '.pjs', '.playlist', '.plproj', '.pmf', '.pmv', '.pns', '.ppj', '.prel', '.pro', '.prproj', '.prtl', '.psb', '.psh', '.pssd', '.pva', '.pvr', '.pxv', '.qt', '.qtch', '.qtindex', '.qtl', '.qtm', '.qtz', '.r3d', '.rcd', '.rcproject', '.rdb', '.rec', '.rm', '.rmd', '.rmd', '.rmp', '.rms', '.rmv', '.rmvb', '.roq', '.rp', '.rsx', '.rts', '.rts', '.rum', '.rv', '.rvid', '.rvl', '.sbk', '.sbt', '.scc', '.scm', '.scm', '.scn', '.screenflow', '.sec', '.sedprj', '.seq', '.sfd', '.sfvidcap', '.siv', '.smi', '.smi', '.smil', '.smk', '.sml', '.smv', '.spl', '.sqz', '.srt', '.ssf', '.ssm', '.stl', '.str', '.stx', '.svi', '.swf', '.swi', '.swt', '.tda3mt', '.tdx', '.thp', '.tivo', '.tix', '.tod', '.tp', '.tp0', '.tpd', '.tpr', '.trp', '.ts', '.tsp', '.ttxt', '.tvs', '.usf', '.usm', '.vc1', '.vcpf', '.vcr', '.vcv', '.vdo', '.vdr', '.vdx', '.veg', '.vem', '.vep', '.vf', '.vft', '.vfw', '.vfz', '.vgz', '.vid', '.video', '.viewlet', '.viv', '.vivo', '.vlab', '.vob', '.vp3', '.vp6', '.vp7', '.vpj', '.vro', '.vs4', '.vse', '.vsp', '.w32', '.wcp', '.webm', '.wlmp', '.wm', '.wmd', '.wmmp', '.wmv', '.wmx', '.wot', '.wp3', '.wpl', '.wtv', '.wve', '.wvx', '.xej', '.xel', '.xesc', '.xfl', '.xlmv', '.xmv', '.xvid', '.y4m', '.yog', '.yuv', '.zeg', '.zm1', '.zm2', '.zm3', '.zmv' )
    return filename.endswith(video_file_extensions)

# Get all the video files in the directory
video_files = []
for path, subdirs, files in os.walk(args.directory):
    for name in files:
        filepath = os.path.join(path, name)
        if is_video_file(filepath):
            video_files.append(filepath)

# Get the showname if not specified
if (args.name is not None):
    showname = args.name
else:
    shownames = dict()
    for filepath in video_files:
        try:
            potential_showname = re.match("([\dA-Za-z].*?)[\._ ]", os.path.basename(filepath)).group(1).title()
        except:
            continue
        if potential_showname in shownames:
            shownames[potential_showname] = shownames[potential_showname] + 1
        else:
            shownames[potential_showname] = 1
    maxValue = 0
    for key, value in shownames.items():
        if value > maxValue:
            maxValue = value
            showname = key


# Make Temporary Folder to store all this stuff
temp_folder_name = "TEMPORARY_NAMING_FOLDER"
temp_dir = os.path.join(args.directory, temp_folder_name)
mkdir(temp_dir)

couldnt_process_list = []

# Rename all the video files to the new names
for filepath in video_files:
    try:
        regex = re.search("[Ss](\d\d)[Ee](\d\d)", filepath)
        season = regex.group(1)
        episode = regex.group(2)
        _, extension = os.path.splitext(filepath)
    except:
        print("Couldn't process video file: " + filepath)
        couldnt_process_list.append(filepath)
        continue

    # Create Season folder if it doesn't exist
    seasonLabel = "Season " + str(int(season))
    seasonDirectory = os.path.join(temp_dir, seasonLabel)
    mkdir(seasonDirectory)

    newFilename = showname + " S" + season + "E" + episode + extension
    newFilepath = os.path.join(seasonDirectory, newFilename)
    if args.dryrun:
        print("Renaming '" + os.path.basename(filepath) + "' to '" + newFilename + "'")
        open(newFilepath, 'a').close()
    else:
        os.rename(filepath, newFilepath)

# Storing the files we couldn't process in a folder
unsortedVideosName = "UnsortedVideos"
if len(couldnt_process_list) > 0:
    unsortedDir = os.path.join(args.directory, unsortedVideosName)
    mkdir(unsortedDir)
    for unsortedFile in couldnt_process_list:
        if args.dryrun:
            if args.verbose:
                print("Storing unsorted file: " + os.path.basename(unsortedFile))
        else:
            os.rename(unsortedFile, os.path.join(unsortedDir, os.path.basename(unsortedFile)))


all_original_files = list(filter(lambda fileName: fileName != temp_folder_name and fileName != unsortedVideosName, os.listdir(args.directory)))

# Deleting all the rest of the old stuff
if not args.dryrun:
    for fileName in all_original_files:
        filepath = os.path.join(args.directory, fileName)
        if os.path.isdir(filepath):
            shutil.rmtree(filepath)
        else:
            os.remove(filepath)
else:
    if args.verbose:
        print("Erasing all the old files")


# Copying over the new stuff
new_files = os.listdir(temp_dir)
for filename in new_files:
    source_file = os.path.join(temp_dir, filename)
    dest_file = os.path.join(args.directory, filename)
    if args.dryrun:
        if args.verbose:
            print("Moving '" + source_file + "' to '" + dest_file + "'")
    else:
        shutil.move(source_file, dest_file)

# Erasing temp folder
shutil.rmtree(temp_dir)
